
# Comments Декораторы функций в языке Python

# Создадим пример функции которая будет принимать один параметр это url адрес
# веб сайта и далее мы создадим такой функционал чтобы наша программа открывала этот сайт в браузере по умолчанию

# За счет декораторов мы можем выполнять код до и после выполнения опредиленной функции


# Example 1

import webbrowser                                # Импортируем модуль webbrowser


def validator(func):                             # func - функция
    def wrapper(url):                            # wrapper - обертка (вложеная функция)
        if "." in url:                           # if "." in url:  - пример проверки есть ли точка в url адресе
            func(url)
        else:
            print("Неверный url")
    return  wrapper                              # Возвращяем функцию


@validator                                       # @ - возможность задекорировать в данном примере в функцию validator
def open_url(url):                               # пример создания функции open_url - произвольное название функции
    webbrowser.open(url)                         # Обращение к модулю при помощи функции open

open_url("https://itproger.com")                 # Открытие указанного url адресса

# Таким образом за счет декораторов вы можете просто к какой либо функции добавить дополнительный
# функционал что может срабатывать до или после функции,удобно тем что можно добавить декоратор и во всех функциях
# будет включена нужная мне проверка, сокращение кода для удобства, в случае удаления декоратора функция не будет срабатывать
# Можно создавать множество декораторо каждый будет отвечать за свой функционал.





























