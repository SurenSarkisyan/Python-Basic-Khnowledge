
# Comments Основы ООП создание класса и обьекта

# Для упрощения понимания ООП возьмем за пример Робота
# Где робота мы постораемся описать за счет классов в ООП в таком случае класс это лишь чертеж робота в котором мы
# описываем основные характеристики.

# Обьект - это уже целый робот который создан точно по чертежу или другими словами по классу

# Наследование - это в данном случае добавление полезных опций к чертежу робота, к примеру к стандартному чертежу робота дорисуем лазеры и крылья например
# все эти дорисовки мы сделаем в классе наследнике основной функционал который взят из родительского класса.

# Полиморфизм- в данном примере это общий функционал для всех роботов и не важно что каждый робот может отличаться друг от друга,к примеру в главном классе мы указываем возможность
# передвижения для всех роботов, далее в классе наследнике мы можем указать возможность левитации, а вдругом классе мы можем указать возможность передвижения по воде
# получается что есть общий функционал что записан в главном чертеже но его можно переписать для каждого последующего робота для каждого последующего наследника

# Инкапсуляция - в данном примере броня защищяющяя робота, под самой броней находятся уязвимые элементы в роде проводов и микросхем
# после прикрытия с помощью брони ( а это разные модификаторы доступа ро тиму Protected или Privat робот полностью будет защищен от внешних вмешательств
# по сути мы делаем доступ ко всем полям или же переменным лишь за счет методов тем самым прямой доступ к полю будет закрыт

# Поле и Переменная это одно и тоже (В классах - поле) (Вне классов - переменные)
# У всех классов методы могут отличаться как и поля с конструкторами каждый класс позволяет создавать
# любое колличество разных обьектов все из них имеют собственные характеристики

# ООП - позволяет описать весь функционал в одном месте для опредиленного действия или обьекта,к примеру мы делаем игру и можно описать поведение
# машины, можно создать десятки методов переменных и массивов и разбросать это все по разным файлам.
# Вместо такого подхода мы создаем отдельный класс описываем все методы переменные и прочие нюансы и на основе класса мы уже можем
# создавать сколько угодно обьектов каждый обьект это конкретная машина, у нее есть общие характеристики
# что записаны в классе но так же могут быть свои уникальные значения, получается что классы и обьекты позволяют нам четко выделить разные
# участки кода, описывать как опредиленные действия в проекте так и опредиленные обькты.

# Так же при создании класса можно использовать списки, кортежи, словари, множества.
# Можно использовать все типы данных изученые в прощлых уроках



# Example 1

class Cat:                     # class - ключевое слово создания класса, Cat - название класса
    name = None                # В данном случае все описание наших обектов находится в классе Cat
    age = None                 # В случае добавления значения в класс у нас есть возможность добавить его и в обьекты
    isHappy = None

cat1 = Cat()                   # cat1 - обьект созданый на основе класса Cat
cat1.name = "Barsik"
cat1.age = 3
cat1.isHappy = True

cat2 = Cat()                   # cat2 - второй обьект созданный на основе одного класса Cat как и cat1
cat2.name = "Tuzik"            # и при этом у этих двух обьектов есть абсолютно разные характеристики
cat2.age = 2
cat2.isHappy = False

print(cat1.name)               # Возможность вывести значения из двух разных обьектов
print(cat2.name)

# Классы и обьеты удобны тем что за счет класса мы можем описать общие характеристики
# в одном месте при этом мы можем не указывать конкретные значения например None как в примере
# а далее мы можем создать различные обьекты и каждому обькту мы уже добавим нужное значение и плюс
# весь функционал все общее описание оно будет находится в одном единственном месте тоесть в одном опредиленном классе это удобно!

# В данном примере класс Cat полностью описывает все что относится к котам а далее мы просто создаем различные обьекты которые обладают характеристиками
# в данном примере это cat1, cat2 но не обладают доп функционалом, весь функционал описывается конкретно в классе Cat.



# Example 2

class Cat:                     # class - ключевое слово создания класса, Cat - название класса
    name = None                # В данном случае все описание наших обектов находится в классе Cat
    age = None                 # В случае добавления значения в класс у нас есть возможность добавить его и в обьекты
    isHappy = None


    def set_data(self, name, age, isHappy):                          # def - функция с методом set_data в которой название параметров совпадаю с названием полей такая этика
         self.name = name                                            # self.name - обращяемся к классу Cat из этого класса мы выбираем поле name и устанавливаем в него значение которое предается внутри функции
         self.age = age
         self.isHappy = isHappy                                      # Функция set_data - будет принимать несколько параметров и будет их устанавливать в поля нашего класса Cat
                                                                     # self - означает что данны метод находится внутри классаи может обращяться к полям внутри класса


cat1 = Cat()                                    # cat1 - обьект созданый на основе класса Cat
cat1.set_data("Barsik", 3, True)                # обращение к функции (методу set_data)

cat2 = Cat()                                    # cat2 - второй обьект созданный на основе одного класса Cat как и cat1
cat2.set_data("Tuzik", 2, False)

print(cat1.name)                                # Возможность вывести значения из двух разных обьектов
print(cat2.name)


# Example 3

class Cat:                     # class - ключевое слово создания класса, Cat - название класса
    name = None                # В данном случае все описание наших обектов находится в классе Cat
    age = None                 # В случае добавления значения в класс у нас есть возможность добавить его и в обьекты
    isHappy = None


    def set_data(self, name, age, isHappy):                          # def - функция с методом set_data в которой название параметров совпадаю с названием полей такая этика
         self.name = name                                            # self.name - обращяемся к классу Cat из этого класса мы выбираем поле name и устанавливаем в него значение которое предается внутри функции
         self.age = age
         self.isHappy = isHappy                                      # Функция set_data - будет принимать несколько параметров и будет их устанавливать в поля нашего класса Cat
                                                                     # self - означает что данны метод находится внутри классаи может обращяться к полям внутри класса


    def get_data(self):                                              # def get_data(self): - метод не будет ничего принимать но будет возвращять нам полную характеристику отностительно какого либо обьекта
        print("name", self.name, "age:", self.age, ". Happy:", self.isHappy)


cat1 = Cat()                                    # cat1 - обьект созданый на основе класса Cat
cat1.set_data("Barsik", 3, True)                # обращение к функции (методу set_data)

cat2 = Cat()                                    # cat2 - второй обьект созданный на основе одного класса Cat как и cat1
cat2.set_data("Tuzik", 2, False)

cat1.get_data()                                 # get_data() - Возможность вывести полную информацию относительно конкретного обьекта в завистимости какой обьект нам нужен в данном примере присутствует и cat1 и cat2 обьекты
cat2.get_data()

# Таким образом при помощи ООП мы реализовали один общий класс в котором у нас есть обьекты с различными характеристиками, можно создавать сотни различных обьектов
# и все они будут иметь доступ к функциям в данном примере def и ко всем характеристикам указанном в классе Cat
# Значения у кажого обьекта могут отличаться и по факту каждый обьект это отдельный код со всеми возможнастями что будут описаны в одном едином месте в данном примере в классе Cat.
# Классы максимально позволяют сократить код и при этом читабельность кода максимально увеличивается!

























