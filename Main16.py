
# Comments Конструкторы в классах, переопределение методов

# За счет конструкторов мы можем выполнить определенный код сразу же при создании объекта
# конструкторы они максимально удобны для установки каких либо значений, на данный момент когда мы создаем какие либо обьекты то мы
# изначально никаких данных в сами обьекты не предаем, чуть позже после создания обьекта мы обращяемся к какому либо методу
# и как раз через этот метод мы устанавливаем опредиленные значения,в случае использования конструктора мы можем сократить код.


# Example 1 Добавление конструктора в класс

class Cat:                     # class - ключевое слово создания класса, Cat - название класса
    name = None                # В данном случае все описание наших объектов находится в классе Cat
    age = None                 # В случае добавления значения в класс у нас есть возможность добавить его и в обьекты
    isHappy = None


    def __init__(self,):       # __init__ - Добавление конструктора в класс
        pass # Данный пример конструктора по умолчанию ничего не принял и ничего не выполнил


    def set_data(self, name, age, isHappy):                          # def - функция с методом set_data в которой название параметров совпадаю с названием полей такая этика
         self.name = name                                            # self.name - обращяемся к классу Cat из этого класса мы выбираем поле name и устанавливаем в него значение которое предается внутри функции
         self.age = age
         self.isHappy = isHappy                                      # Функция set_data - будет принимать несколько параметров и будет их устанавливать в поля нашего класса Cat
                                                                      # self - означает что данны метод находится внутри классаи может обращяться к полям внутри класса


    def get_data(self):                                              # def get_data(self): - метод не будет ничего принимать но будет возвращять нам полную характеристику отностительно какого либо обьекта
        print("name", self.name, "age:", self.age, ". Happy:", self.isHappy)


cat1 = Cat()                                    # cat1 - обьект созданый на основе класса Cat
cat1.set_data("Barsik", 3, True)                # обращение к функции (методу set_data)

cat2 = Cat()                                    # cat2 - второй обьект созданный на основе одного класса Cat как и cat1
cat2.set_data("Tuzik", 2, False)

cat1.get_data()                                 # get_data() - Возможность вывести полную информацию относительно конкретного обьекта в завистимости какой обьект нам нужен в данном примере присутствует и cat1 и cat2 обьекты
cat2.get_data()



# Example 2 Добавление конструктора в класс

# Кроме того в конструкторе помимо установки значений можно выполнять какой-либо другой код

class Cat:                     # class - ключевое слово создания класса, Cat - название класса
    name = None                # В данном случае все описание наших объектов находится в классе Cat
    age = None                 # В случае добавления значения в класс у нас есть возможность добавить его и в объекты
    isHappy = None

    def __init__(self, name, age, isHappy):                            # __init__ - Добавление конструктора в класс
        #self.name = name                                               # Конструкторы удобны тем что позволяют облегчить код потому что теперь не нужно создавать отдельные методы по установке значений
        #self.age = age                                                 # а так же не нужно вызывать методы по установке значений
        #self.isHappy = isHappy

        self.set_data(name, age, isHappy)                              # Установка значений
        self.get_data()                                                # Получение значения


    def set_data(self, name, age, isHappy):...                         # def - функция с методом set_data в которой название параметров совпадаю с названием полей такая этика

    def get_data(self):...                                             # def get_data(self): - метод не будет ничего принимать но будет возвращять нам полную характеристику отностительно какого либо обьекта

cat1 = Cat("Barsik", 3, True)                                          # cat1 - обьект созданый на основе класса Cat
cat2 = Cat("Tuzik", 2, False)                                          # cat2 - второй обьект созданный на основе одного класса Cat как и cat1


# Example 3 Переопределение методов

class Cat:                                                               # Пример применения self.set_data и self.get_data для упрощения кода
    name = None
    age = None
    isHappy = None

    def __init__(self, name, age, isHappy):
        self.set_data(name, age, isHappy)
        self.get_data()


    def set_data(self, name, age, isHappy = None):
        self.name = name
        self.age = age
        self.isHappy = isHappy

    def get_data(self):...


cat1 = Cat("Barsik", 3, True)
cat1.set_data("John", 3)                            # isHappy = None параметр в случае вызова данного метода в случе не передачи третьего значения

cat2 = Cat("Tuzik", 2, False)




























